* Base
** Package Management
   #+begin_src emacs-lisp :tangle yes
     (require 'package)
     (setq package-archives
           '(("gnu"       . "http://elpa.gnu.org/packages/")
             ("marmalade" . "http://marmalade-repo.org/packages/")
             ("melpa"     . "http://melpa.org/packages/")))
     (setq package-enable-at-startup nil)
     (package-initialize)

     ;; Specifies local directory to load packages from
     (let ((default-directory  "~/.emacs.d/lisp/"))
       (normal-top-level-add-to-load-path '("."))
       (normal-top-level-add-subdirs-to-load-path))

     ;; Package manager
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (require 'use-package)
     (setq use-package-always-ensure t) ; Ensure packages are downloaded
   #+end_src
** Essential Settings
*** Misc things
    #+begin_src emacs-lisp :tangle yes
     (server-start)
     ;; MacOS has some trouble finding ispell
     (when (eq system-type 'darwin)
       (setq ispell-program-name "/usr/local/bin/ispell"))
     ;; For ansi-term n' stuff
     (setq explicit-shell-file-name "/bin/bash")
     (setq inhibit-splash-screen t ; No welcome screen
           inhibit-startup-message t
           inhibit-startup-echo-area-message t)
     (tool-bar-mode -1) ; No toolbar
     (scroll-bar-mode -1) ; Hide scrollbars
     (menu-bar-mode -1) ; Hide menu bar
     (show-paren-mode t) ; Highlights matching parenthesis
     (global-visual-line-mode t)
     (setq ring-bell-function 'ignore) ; Disable ALL bells! They suck!
     ;;(electric-pair-mode t) ; Add closing pairs automatically
     (setq initial-scratch-message "") ; No scratch text
     (fset 'yes-or-no-p 'y-or-n-p) ; y/n instead of yes/no

     ;; No tabs, use spaces
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
     (defvaralias 'c-basic-offset 'tab-width)
     (defvaralias 'cperl-indent-level 'tab-width)
     
     ;; Default browser for links
     (setq browse-url-firefox-program (if (eq system-type 'darwin)
                                          "/Users/elijah/bin/firefox"
                                        "firefox")
           browse-url-generic-program browse-url-firefox-program
           browse-url-browser-function 'browse-url-generic)

     (add-to-list 'exec-path "/usr/local/bin")

     (setq split-height-threshold nil)
     (setq split-width-threshold 160)
    #+end_src
   
*** Disable killing *scratch*
    
    #+begin_src emacs-lisp :tangle yes
      ;; From https://emacs.stackexchange.com/questions/19254/never-close-scratch
      (add-hook 'kill-buffer-query-functions
                (lambda ()
                  (if (not (equal (buffer-name) "*scratch*"))
                      t
                    (message "Not allowed to kill %s, burying instead" (buffer-name))
                    (bury-buffer)
                    nil)))
    #+end_src

** Backup Options
   #+begin_src emacs-lisp :tangle yes
     (setq backup-by-copying t) ; Stop shinanigans with links
     (setq backup-directory-alist '((".*" . "~/.bak.emacs/backup/")))
     ;; Creates auto directory if it doesn't already exist
     (when (eq nil (file-exists-p "~/.bak.emacs/"))
       (make-directory "~/.bak.emacs/"))
     (when (eq nil (file-exists-p "~/.bak.emacs/auto"))
       (make-directory "~/.bak.emacs/auto"))
     ;; Backup in one place. Flat, no tree structure
     (setq auto-save-file-name-transforms '((".*" "~/.bak.emacs/auto/" t)))
   #+end_src
** Handy functions
   #+begin_src emacs-lisp :tangle yes
     (defun eli/load-init ()
       "Reloads init file (and therefore, README.org)"
       (interactive)
       (load-file "~/.emacs.d/init.el"))

     (defun eli/replace-region-via-function (fun)
       "Replace a selected region via the given function"
       (interactive)
       (let* ((bounds (cons (region-beginning) (region-end)))
              (text   (buffer-substring-no-properties
                       (car bounds)
                       (cdr bounds))))
         (when bounds
           (delete-region (car bounds) (cdr bounds))
           (insert (funcall fun text)))))

     (defun eli/url-hexify-region ()
       "Convert the selectd region to a URL hexified string."
       (interactive)
       (eli/replace-region-via-function 'url-hexify-string))


     (defun eli/binary-string-to-ascii (s)
       "Convert a string such as '01100000' into an ascii character string"
       (let ((len (length s))
             (result 0))
         (while (not (= len 0))
           (setq result (+ result (if (string= (substring s 0 1) "1")
                                      (lsh 1 (- len 1))
                                    0)))
           (setq s (substring s 1 nil))
           (setq len (- len 1)))
         (make-string 1 result)))

     (defun eli/binary-strings-to-ascii-string (list)
       "Convert string list such as 01100000 01110000 into an ascii string"
       (if (= 0 (length list))
           ""
         (concat (eli/binary-string-to-ascii (car list))
                 (eli/binary-strings-to-ascii-string (cdr list)))))

     (defun eli/convert-binary-string-region-to-ascii ()
       "Convert a binary string region to a human readable string."
       (interactive)
       (eli/replace-region-via-function
        '(lambda (text)
           (eli/binary-strings-to-ascii-string (split-string text)))))

     (defun eli/char-to-binary-string (num)
       "Converts a char to a binary string"
       (let ((res "")
             (count 8))
         (while (> count 0)
           (setq res (concat (if (= 1 (logand 1 num)) "1" "0") res))
           (setq num (lsh num -1))
           (setq count (- count 1)))
         res))

     (defun eli/string-to-binary-string (s)
       "Converts a string to a binary representation string"
       (if (= 0 (length s))
           ""
         (let ((head (string-to-char (substring s 0 1)))
               (tail (substring s 1 nil)))
         (concat (eli/char-to-binary-string head)
                 " "
                 (eli/string-to-binary-string tail)))))

     (defun eli/string-region-to-binary-string ()
       "Converts a region to a binary representation region"
       (interactive)
       (eli/replace-region-via-function 'eli/string-to-binary-string))

     (defun eli/gcd (first second)
       "Return the gcd of the two given values."
       (let ((remainder (mod first second)))
         (if (eq remainder 0)
             second
           (eli/gcd second remainder))))

     (defun eli/simplify-fraction (first second)
       "Simplifies the given fraction using their GCD."
       (let ((gcd (eli/gcd first second)))
         (list (/ first gcd) (/ second gcd))))

     (defun eli/surround-fat-comment ()
       "Surrounds a line of text with a 'fat comment'"
       (interactive)
       (let* ((line (thing-at-point 'line t))
              (indent (current-indentation))
              (comment-char (string-to-char comment-start))
              (surround (concat
                         (make-string indent ?\s)
                         (make-string
                          (- (length line) indent 1)
                          comment-char))))
         ;; Insert comment after
         (end-of-line)
         (open-line 1)
         (forward-line)
         (insert surround)
         ;; Insert comment before
         (forward-line -1)
         (beginning-of-line)
         (open-line 1)
         (insert surround)))

     (defun eli/center-buffer ()
       "Centers the current buffer (based on column ruler)"
       (interactive)
       (let ((margin (/ (- (frame-width) fci-column) 3)))
         (when (> margin 0)
           (set-window-margins nil margin))))

     (defun eli/uncenter-buffer ()
       (interactive)
       (set-window-margins nil nil))

     (defun eli/align-regexp-eq ()
       "Aligns lines at the equals character."
       (interactive)
       (align-regexp (region-beginning) (region-end) "\\(\\s-*\\)="))
     (global-set-key (kbd "C-c e a") 'eli/align-regexp-eq)
   #+end_src
** Global keybindings
*** Follow newly created windows, only when created manually
   #+begin_src emacs-lisp :tangle yes
     (defun eli/split-and-follow-horizontally ()
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 2") 'eli/split-and-follow-horizontally)

     (defun eli/split-and-follow-vertically ()
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 3") 'eli/split-and-follow-vertically)
   #+end_src
*** Convenient window switching
   #+begin_src emacs-lisp :tangle yes
     (global-set-key "\M-o" 'other-window)
   #+end_src
** Human language
   Because sometimes I need to speak with humans.

   #+begin_src emacs-lisp :tangle yes
     (defun eli/add-insert-char-key (sequence char)
       (global-set-key (kbd (concat "C-c l" sequence))
                       `(lambda () (interactive) (insert-char ',char))))

     ;; German
     (eli/add-insert-char-key "\" a" ?ä)
     (eli/add-insert-char-key "\" A" ?Ä)
     (eli/add-insert-char-key "\" o" ?ö)
     (eli/add-insert-char-key "\" O" ?Ö)
     (eli/add-insert-char-key "\" u" ?ü)
     (eli/add-insert-char-key "\" U" ?Ü)
     (eli/add-insert-char-key "\" s" ?ß)

     ;; Polish
     (eli/add-insert-char-key ", a" ?ą)
     (eli/add-insert-char-key ", A" ?Ą)
     (eli/add-insert-char-key "/ c" ?ć)
     (eli/add-insert-char-key "/ C" ?Ć)
     (eli/add-insert-char-key ", e" ?ę)
     (eli/add-insert-char-key ", E" ?Ę)
     (eli/add-insert-char-key "/ l" ?ł)
     (eli/add-insert-char-key ", L" ?Ł)
     (eli/add-insert-char-key "/ n" ?ń)
     (eli/add-insert-char-key "/ N" ?Ń)
     (eli/add-insert-char-key "/ o" ?ó)
     (eli/add-insert-char-key "/ O" ?Ó)
     (eli/add-insert-char-key "/ s" ?ś)
     (eli/add-insert-char-key "/ S" ?Ś)
     (eli/add-insert-char-key "/ z" ?ź)
     (eli/add-insert-char-key "/ Z" ?Ź)
     (eli/add-insert-char-key ". z" ?ż)
     (eli/add-insert-char-key ". Z" ?Ż)

     ;; Maths
     (eli/add-insert-char-key "m 2" ?²)
     (eli/add-insert-char-key "m 3" ?³)
     (eli/add-insert-char-key "m d" ?°)
     (eli/add-insert-char-key "m n n" ?¬)
     (eli/add-insert-char-key "m n e" ?≠)
     (eli/add-insert-char-key "m n g" ?≯)
     (eli/add-insert-char-key "m n l" ?≮)
     (eli/add-insert-char-key "m n i" ?∉)
     (eli/add-insert-char-key "m g e" ?≥)
     (eli/add-insert-char-key "m l e" ?≤)
     (eli/add-insert-char-key "m i" ?∈)
   #+end_src
** Tramp
   Use plink (PuTTY) when running Windows.
   
   #+begin_src emacs-lisp :tangle yes
     (when (eq window-system 'w32)
       (setq tramp-default-method "plink")
       (when (and (boundp 'putty-directory)
                  (not (string-match putty-directory (getenv "PATH")))
                  (file-directory-p putty-directory))
         (setenv "PATH" (concat putty-directory ";" (getenv "PATH")))
         (add-to-list 'exec-path putty-directory)))
   #+end_src
* Aesthetics
** Configure a nice theme
   #+begin_src emacs-lisp :tangle yes
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
     (load-theme 'spolsky t)
     (set-face-attribute 'default nil :height 110)
     ;; When in terminal
     (unless (display-graphic-p) 
       (setq nlinum-format "%d ")
       (add-to-list 'default-frame-alist '(background-color . "color-16"))
       (custom-set-faces
        '(linum ((t (:background "color-16" :foreground "#9fc59f"))))))
   #+end_src
** Fancy rainbox parens to sooth my eyes
   #+begin_src emacs-lisp :tangle yes
     (use-package rainbow-delimiters
       :config
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
       (set-face-foreground 'rainbow-delimiters-depth-1-face "firebrick")
       (set-face-foreground 'rainbow-delimiters-depth-2-face "dark magenta")
       (set-face-foreground 'rainbow-delimiters-depth-3-face "orange red")
       (set-face-foreground 'rainbow-delimiters-depth-4-face "blue")
       (set-face-foreground 'rainbow-delimiters-depth-5-face "spring green")
       (set-face-foreground 'rainbow-delimiters-depth-6-face "cyan")
       (set-face-foreground 'rainbow-delimiters-unmatched-face "magenta"))
   #+end_src
** Pretty symbols
*** Global
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun eli/pretty-symbol-push-default ()
        (push '("!="     . ?≢) prettify-symbols-alist)
        (push '("=="     . ?≡) prettify-symbols-alist)
        (push '("<="     . ?≤) prettify-symbols-alist)
        (push '(">="     . ?≥) prettify-symbols-alist)
        (push '("=>"     . ?⇒) prettify-symbols-alist)
        (push '("return" . ?⏎) prettify-symbols-alist))
    #+END_SRC
*** C & C++
    #+BEGIN_SRC emacs-lisp :tangle yes
      (mapc
       (lambda (hook)
         (add-hook hook (lambda ()
                          (eli/pretty-symbol-push-default)
                          (push '("NULL" . ?∅) prettify-symbols-alist)
                          (push '("||"   . ?∨) prettify-symbols-alist)
                          (push '("&&"   . ?∧) prettify-symbols-alist)
                          (push '("!"    . ?¬) prettify-symbols-alist)
                          (prettify-symbols-mode t))))
       '(c-mode-hook c++-mode-hook))
    #+END_SRC
*** Python
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-hook 'python-mode-hook
                (lambda ()
                  (eli/pretty-symbol-push-default)
                  (push '("def"     . ?ƒ) prettify-symbols-alist)
                  (push '("sum"     . ?Σ) prettify-symbols-alist)
                  (push '("**2"     . ?²) prettify-symbols-alist)
                  (push '("**3"     . ?³) prettify-symbols-alist)
                  (push '("None"    . ?∅) prettify-symbols-alist)
                  (push '("in"      . ?∈) prettify-symbols-alist)
                  (push '("not in"  . ?∉) prettify-symbols-alist)
                  (push '("or"      . ?∨) prettify-symbols-alist)
                  (push '("and"     . ?∧) prettify-symbols-alist)
                  (push '("not"     . ?¬) prettify-symbols-alist)
                  (push '("math.pi" . ?π) prettify-symbols-alist)
                  (prettify-symbols-mode t)))
    #+END_SRC
*** Lisp
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-hook 'emacs-lisp-mode-hook
                (lambda ()
                  (eli/pretty-symbol-push-default)
                  (push '("lambda"   . ?λ) prettify-symbols-alist)
                  (push '("defun"    . ?ƒ) prettify-symbols-alist)
                  (push '("defmacro" . ?μ) prettify-symbols-alist)
                  (push '("defvar"   . ?ν) prettify-symbols-alist)
                  (prettify-symbols-mode t)))
    #+END_SRC
*** PHP
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-hook 'php-mode-hook
                (lambda ()
                  (eli/pretty-symbol-push-default)
                  (push '("function" . ?ƒ) prettify-symbols-alist)
                  (push '("null"     . ?∅) prettify-symbols-alist)
                  (prettify-symbols-mode t)))
    #+END_SRC
*** Javascript
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-hook 'js-mode-hook
                (lambda ()
                  (eli/pretty-symbol-push-default)
                  (push '("function" . ?ƒ) prettify-symbols-alist)
                  (push '("null"     . ?∅) prettify-symbols-alist)
                  (push '("||"       . ?∨) prettify-symbols-alist)
                  (push '("&&"       . ?∧) prettify-symbols-alist)
                  (push '("!"        . ?¬) prettify-symbols-alist)
                  (push '("in"       . ?∈) prettify-symbols-alist)
                  (prettify-symbols-mode t)))
    #+END_SRC
*** Kotlin
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-hook 'kotlin-mode-hook
                (lambda ()
                  (eli/pretty-symbol-push-default)
                  (push '("fun"     . ?ƒ) prettify-symbols-alist)
                  (push '("null"    . ?∅) prettify-symbols-alist)
                  (push '("in"      . ?∈) prettify-symbols-alist)
                  (push '("not in"  . ?∉) prettify-symbols-alist)
                  (push '("||"      . ?∨) prettify-symbols-alist)
                  (push '("&&"      . ?∧) prettify-symbols-alist)
                  (push '("!"       . ?¬) prettify-symbols-alist)
                  (push '("!!"      . ?‼) prettify-symbols-alist)
                  (push '("->"      . ?⇒) prettify-symbols-alist)
                  (prettify-symbols-mode t)))
    #+END_SRC
** Relative line numbers

   [[https://github.com/CodeFalling/nlinum-relative][Nlinum Relative]]. Relative line numbers n' stuff
   #+begin_src emacs-lisp :tangle yes
     (defun eli/line-numbers-mode () (interactive)
        (display-line-numbers-mode t)
        (setq display-line-numbers 'relative
              display-line-numbers-width 1))

     (if (version< "26.0.50" emacs-version)
         (mapc (lambda (hook) (add-hook hook 'eli/line-numbers-mode))
               '(prog-mode-hook web-mode-hook))
       (use-package nlinum-relative
         :config
         (nlinum-relative-setup-evil)
         (setq nlinum-relative-redisplay-delay 0.25)
         (setq nlinum-relative-current-symbol "")
         (add-hook 'prog-mode-hook 'nlinum-relative-mode)))
   #+end_src

** Rainbow mode (highlight CSS style hex colors)

   [[https://julien.danjou.info/projects/emacs-packages#rainbow-mode][Rainbow Mode]]. Highlights colors (~#ffffff~ syntax)
   See [[http://stackoverflow.com/questions/16048231/how-to-enable-a-non-global-minor-mode-by-default-on-emacs-startup][this StackOverflow post]] for how to enable it on a per-major-mode basis.
   #+begin_src emacs-lisp :tangle yes
     (use-package rainbow-mode
       :config
       (mapc (lambda (hook) (add-hook hook (lambda () (rainbow-mode 1))))
             '(emacs-lisp-mode-hook web-mode-hook css-mode-hook
                                    js-mode-hook)))
   #+end_src

** Delightful mode display

   [[https://www.emacswiki.org/emacs/DelightedModes][Delight.]] Makes the toolbar mode display more of a "delight"
   #+begin_src emacs-lisp :tangle yes
     (use-package delight
       :config
       (delight '((company-mode " Co" company)
                  (flycheck-mode " Fl" flycheck)
                  (undo-tree-mode nil undo-tree)
                  (which-key-mode nil which-key)
                  (helm-mode nil helm)
                  (editorconfig-mode nil editorconfig)
                  (rainbow-mode)
                  (evil-smartparens-mode nil evil-smartparens)
                  (smartparens-mode nil smartparens)
                  (smart-semicolon-mode nil smart-semicolon)
                  (auto-revert-mode nil autorevert))))
   #+end_src
   
** Nice unicode support
   [[https://github.com/rolandwalker/unicode-fonts][Unicode Fonts.]] Add unicode support for some OSs.
   #+begin_src emacs-lisp :tangle yes
     (use-package unicode-fonts
       :config
       (unicode-fonts-setup))
   #+end_src

** Column & line highlighting
*** Highlight current line
    #+begin_src emacs-lisp :tangle yes
      (global-hl-line-mode)
      (set-face-background 'hl-line "#222")
      (set-face-underline 'hl-line nil)
    #+end_src
*** Highlight 80th column
    #+begin_src emacs-lisp :tangle yes
      (use-package fill-column-indicator
        :config
        (setq fci-rule-color "#222")
        (setq fci-rule-column 80)
        ;; Display the column indicator in all programming modes
        (add-hook 'prog-mode-hook 'fci-mode))
    #+end_src
** Highlight TODO, FIXME, NOTE
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'prog-mode-hook
               (lambda ()
                 (font-lock-add-keywords
                  nil
                  '(("\\<\\(FIXME\\|TODO\\|NOTE\\):"
                     1 font-lock-warning-face t)))))
   #+end_src
** Fonts
   Nice windows font:
   #+begin_src emacs-lisp :tangle yes
     (when (eq window-system 'w32)
       (set-frame-font "Consolas"))
   #+end_src
* Plugins
  [[https://github.com/emacs-helm/helm][Helm]]. A nice minibuffer / completion / etc framework
  #+begin_src emacs-lisp :tangle yes
     (use-package helm
       :bind
       (("M-x" . helm-M-x)
        ("C-x C-f" . helm-find-files)
        ("C-x b" . helm-buffers-list)
        :map helm-find-files-map
        ("<RET>" . eli/helm-return-find-file))
       :config
       (require 'helm-config)
       (helm-mode 1)
       (global-set-key (kbd "M-x") 'helm-M-x)
       (setq helm-M-x-fuzzy-match t          ; Fuzzy M-x matching
             helm-buffer-max-length nil      ; Don't limit filename length
             helm-split-window-in-side-p t)) ; Split on the bottom edge

     ;; For using the enter key in helm
     (defun eli/helm-return-find-file ()
       (interactive)
       (if (file-directory-p (helm-get-selection))
           (helm-execute-persistent-action)
         (helm-maybe-exit-minibuffer)))
  #+end_src
   
  [[https://www.emacswiki.org/emacs/CompanyMode][Company Mode]]. For autocompletion.
  #+begin_src emacs-lisp :tangle yes
    (require 'color)
    (use-package company
      :config
      (global-company-mode t)
      (setq company-idle-delay 0) ; Delay to complete
      (setq company-minimum-prefix-length 1)
      (setq company-selection-wrap-around t)
      (setq company-global-modes '(not org-mode)) ; Disable in org

      (define-key company-active-map [backtab] 'company-select-previous)
      (define-key company-active-map [tab] 'company-select-next)


      ;; Style nicely
      (let* ((bg (face-attribute 'default :background))
             (bg-light (color-lighten-name bg 2))
             (bg-lighter (color-lighten-name bg 5))
             (bg-lightest (color-lighten-name bg 10))
             (ac (face-attribute 'match :foreground)))
        (custom-set-faces
         `(company-tooltip
           ((t (:inherit default :background ,bg-light))))
         `(company-scrollbar-bg ((t (:background ,bg-lightest))))
         `(company-scrollbar-fg ((t (:background ,bg-lighter))))
         `(company-tooltip-selection
           ((t (:inherit font-lock-function-name-face))))
         `(company-tooltip-common
           ((t (:inherit font-lock-constant-face))))
         `(company-preview-common
           ((t (:foreground ,ac :background ,bg-lightest))))))

      ;; Workaround for using company with FCI mode

      (defvar-local company-fci-mode-on-p nil)

      (defun company-turn-off-fci (&rest ignore)
        (when (boundp 'fci-mode)
          (setq company-fci-mode-on-p fci-mode)
          (when fci-mode (fci-mode -1))))

      (defun company-maybe-turn-on-fci (&rest ignore)
        (when company-fci-mode-on-p (fci-mode 1)))

      (add-hook 'company-completion-started-hook
                'company-turn-off-fci)
      (add-hook 'company-completion-finished-hook
                'company-maybe-turn-on-fci)
      (add-hook 'company-completion-cancelled-hook
                'company-maybe-turn-on-fci))
  #+end_src

  [[https://github.com/flycheck/flycheck][Flycheck]]. For syntax correction.
  #+begin_src emacs-lisp :tangle yes
     (use-package helm-flycheck)
     (use-package flycheck
       :config
       (global-flycheck-mode t))
  #+end_src

  [[https://www.emacswiki.org/emacs/Magit][Magit]]. Git plugin that makes life easy.
  #+begin_src emacs-lisp :tangle yes
     (use-package magit)
     ;; Vim bindings for magit
     (use-package evil-magit)
  #+end_src
   
  [[https://github.com/justbur/emacs-which-key][Which Key]]. Shows help dialogs for keybindings
  #+begin_src emacs-lisp :tangle yes
     (use-package which-key
       :config
       (which-key-mode))
  #+end_src
   
  [[https://github.com/editorconfig/editorconfig-emacs][EditorConfig]]. For consistent project code styles
  #+begin_src emacs-lisp :tangle yes
     (use-package editorconfig
       :ensure t
       :config
       (editorconfig-mode 1))
  #+end_src

  [[https://www.emacswiki.org/emacs/nameses][Nameses]]. For managing multiple desktops
  #+begin_src emacs-lisp :tangle yes
     (require 'desktop)
     (require 'nameses)
     (setq nameses-ido-mode nil)
  #+end_src
   
  [[https://github.com/cyrus-and/zoom][Zoom.]] Zooms current pane!
  #+begin_src emacs-lisp :tangle yes
     (use-package zoom
       :config
       (custom-set-variables
        '(zoom-size '(0.8 . 0.8))))
  #+end_src

  [[https://github.com/sshaw/copy-as-format][Copy As Format.]] Copies as Slack / Github / Etc formatted code blocks
  #+begin_src emacs-lisp :tangle yes
     (use-package copy-as-format)
  #+end_src

  [[https://github.com/jwiegley/alert][Alert.]] Used for sending alerts / notifications
   
  #+begin_src emacs-lisp :tangle yes
     (use-package alert
       :commands (alert)
       :init
       (setq alert-default-style (if (eq system-type 'darwin)
                                  'osx-notifier
                                  'libnotify)))
  #+end_src

  [[https://github.com/syohex/emacs-quickrun][Quickrun.]] Used for running a single buffer in an isolated environment
   
  #+begin_src emacs-lisp :tangle yes
     (use-package quickrun
       :config
       (add-hook 'quickrun--mode-hook 'turn-off-evil-mode))
  #+end_src

  [[https://github.com/myrkr/dictionary-el][Dictionary.]] For word lookups.
   
  #+begin_src emacs-lisp :tangle yes
     (use-package dictionary)
  #+end_src
   
  [[https://github.com/Fuco1/smartparens][Smartparens.]] Sane automatic parens.
   
  #+begin_src emacs-lisp :tangle yes
    (use-package smartparens
      :config
      ;; For a lot of modes, smartparens is super annoying :)
      (mapc (lambda (hook) (add-hook hook 'smartparens-mode))
            '(c-mode-hook c++-mode-hook js-mode-hook php-mode-hook
                          lisp-mode-hook css-mode-hook python-mode-hook
                          kotlin-mode-hook java-mode-hook))

      ;; Make indenting braces behave nicely.
      (defun eli/sp-ret-and-enter-sexp (&rest _ignored)
        (newline)
        (indent-according-to-mode)
        (forward-line -1)
        (indent-according-to-mode))

      (mapc (lambda (mode)
              (sp-local-pair mode "{" nil :post-handlers
                             '((eli/sp-ret-and-enter-sexp "RET"))))
            '(c-mode c++-mode js-mode php-mode lisp-mode css-mode
                     python-mode kotlin-mode java-mode)))
    (use-package evil-smartparens
      :config
      (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
  #+end_src

  [[https://github.com/iquiw/smart-semicolon][Smartsemicolon.]] Sane semicolons.

  #+begin_src emacs-lisp :tangle yes
    (use-package smart-semicolon
      :config
      (mapc (lambda (hook) (add-hook hook #'smart-semicolon-mode))
            '(c-mode-hook c++-mode-hook php-mode-hook js-mode-hook
                          css-mode-hook)))
  #+end_src

  [[https://github.com/syohex/emacs-helm-ag][Helm AG]]. Silver Searcher integration.
  #+begin_src emacs-lisp :tangle yes
     (use-package helm-ag)
  #+end_src

  [[https://github.com/joaotavora/yasnippet][YASnippet]]. Code snippets.
  #+begin_src emacs-lisp :tangle yes
     (use-package yasnippet
       :config
       (yas-global-mode 1)
       (define-key yas-minor-mode-map (kbd "TAB") nil)
       (define-key yas-minor-mode-map (kbd "M-TAB") 'yas-expand))
  #+end_src

  [https://github.com/emacs-lsp/lsp-mode][LSP Mode]].
  #+begin_src emacs-lisp :tangle yes
    (use-package lsp-mode)
    (use-package company-lsp
      :config
      (push 'company-lsp company-backends))
  #+end_src
* Evil Mode
** Load and configure evil
   #+begin_src emacs-lisp :tangle yes
     ;; For defining the leader key
     (use-package general)

     ;; Base evil package
     (use-package evil
       :demand
       :init
       ;; Unbind <C-u> for evil mode'
       (setq evil-want-C-u-scroll t)
       :config
       (evil-mode t)

       ;; Make asterisk search for dash-included-words
       (setq-default evil-symbol-word-search t)
       ;; Put the cursor in newly created panes
       ;;(setq evil-split-window-below t)
       ;;(setq evil-vsplit-window-right t)

       ;; Automatically opens helm after :e
       (define-key evil-ex-map "e " 'helm-find-files)

       (general-create-definer bind-leader
         :keymaps 'global
         :states '(normal emacs)
         :prefix "SPC")

       (general-define-key
        :states 'motion
        "k" 'evil-previous-visual-line
        "j" 'evil-next-visual-line)

       (general-define-key
        :states 'operator
        "k" 'evil-previous-line
        "j" 'evil-next-line)

       ;; Suspend nicely in terminal
       (general-define-key
        :states 'normal
        "C-z"  (lambda () (interactive)
                 (when (eq (display-graphic-p) nil)
                   (suspend-frame))))

       (defun eli/helm-gtags-find-tag-at-point () (interactive)
          (helm-gtags-find-tag (thing-at-point 'symbol)))
       (defun eli/helm-gtags-find-rtag-at-point () (interactive)
          (helm-gtags-find-rtag (thing-at-point 'symbol)))

       (bind-leader
         "a" 'org-agenda
         "c" 'cfw:open-org-calendar
         "dd" (lambda () (interactive) (message (current-time-string)))
         "dl" 'dictionary-lookup-definition
         "ds" 'dictionary-search
         "e" 'gnus
         "f" 'helm-flycheck
         "g" 'magit-status
         "hp" 'helm-ag-project-root
         "kr" 'helm-show-kill-ring
         "kk" 'kill-this-buffer
         "kw" 'kill-buffer-and-window
         "l" 'org-timeline
         "m" 'helm-mini
         "nl" 'nameses-load
         "nr" 'nameses-reset
         "ns" 'nameses-save
         "q" 'quickrun
         "r" 'recompile
         "sco" 'slack-channel-join
         "scs" 'slack-channel-select
         "sil" 'slack-im-list-update
         "sio" 'slack-im-open
         "sis" 'slack-im-select
         "ss" 'slack-start
         "tp" 'helm-gtags-pop-stack
         "tr" 'eli/helm-gtags-find-rtag-at-point
         "ts" 'helm-gtags-show-stack
         "tt" 'eli/helm-gtags-find-tag-at-point
         "w" 'save-buffer
         "x" 'helm-M-x
         "z" 'zoom))

     ;; Tpope's surround
     (use-package evil-surround
       :config
       (global-evil-surround-mode 1))
   #+end_src
** External config for powerline and evil powerline
   #+begin_src emacs-lisp :tangle yes
     ;; (~/.emacs.d/lisp/init-powerline.el)
     (require 'init-powerline)
   #+end_src
** Global Evil Plugins
   [[https://github.com/edkolev/evil-lion][Evil Lion]]. Used for aligning (similar to align-regexp, but more vimy)
   #+begin_src emacs-lisp :tangle yes
     (use-package evil-lion
       :config
       (evil-lion-mode))
   #+end_src
** Keybindings
   #+begin_src emacs-lisp :tangle yes
     ;; Disable evil-ex initial auto-fill
     (define-key evil-normal-state-map (kbd ":")
       '(lambda () (interactive)
          (evil-ex "")))
   #+end_src
* Org Mode
** Basic
   #+begin_src emacs-lisp :tangle yes
     ;; Better looking org headers
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

     (setq
      org-pretty-entities t ; Alows displaying UTF-8 chars like \alpha
      org-startup-truncated nil
      org-src-fontify-natively t
      org-agenda-files '("~/Dropbox/Notes/everything.org")
      org-src-window-setup 'current-window
      org-ellipsis " ⤵"
      ;; Allows custom inline image sizes
      org-image-actual-width nil
      ;; Makes inline latex previews bigger
      org-format-latex-options (plist-put
                                org-format-latex-options :scale 1.7)
      org-export-latex-table-caption-above nil
      org-latex-table-caption-above nil
      org-latex-caption-above nil)

     (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
     ;; To enable an agenda hotkey
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)

     (with-eval-after-load 'org
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((python . t))))
   #+end_src

   Custom Org Keybindings
   #+begin_src emacs-lisp :tangle yes
     (define-key org-mode-map (kbd "M-h") 'org-metaleft)
     (define-key org-mode-map (kbd "M-s") 'org-metaright)
     (define-key org-mode-map (kbd "M-e") 'org-latex-export-to-pdf)
   #+end_src

   Code evaluation prompt settings.
   #+begin_src emacs-lisp :tangle yes
     (setq org-confirm-babel-evaluate nil)
   #+end_src
   
   Don't spell check in org source code blocks.
   #+begin_src emacs-lisp :tangle yes
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_LATEX" . "#\\+END_LATEX"))
   #+end_src
** Agenda
   #+begin_src emacs-lisp :tangle yes
     ;; Match those tagged with, are not scheduled/deadlined, are not DONE.
     (setq org-agenda-custom-commands
           '(("d" "non-[d]eadlined tasks"
              tags (concat "-DEADLINE={.+}/!+TODO|+STARTED|+WAITING"
                           " -SCHEDULED={.+}/!+TODO|+STARTED|+WAITING"))))

     ;; Make the agenda schedule prettier
     (setq org-agenda-prefix-format
           '((agenda . " %i %-12t% s %b\n                           ")
             (timeline . "  % s")
             (todo . " %i %-12:c")
             (tags . " %i %-12:c")
             (search . " %i %-12:c")))

     (setq org-todo-keywords
           '((sequence "TODO" "STARTED" "WAITING" "|" "DONE")))

     ;; Hide DONE items
     (setq org-agenda-skip-scheduled-if-done t
           org-agenda-skip-deadline-if-done t)
     ;; Set a 30 day span, instead of a week view
     (setq org-agenda-start-day "-3d"
           org-agenda-span 30)
     (setq org-agenda-show-all-dates nil) ; Omit empty days in the agenda
     (setq org-deadline-warning-days 0) ; Disable pre-warnings
     ;; Hide the time grid by default
     (setq org-agenda-use-time-grid nil)
   #+end_src
** Calendar
   #+begin_src emacs-lisp :tangle yes
    (use-package calfw-org)
    (use-package calfw
      :config
      (require 'calfw-org)
     
      ;; Nicer Unicode characters
      (setq cfw:fchar-junction ?╋
            cfw:fchar-vertical-line ?┃
            cfw:fchar-horizontal-line ?━
            cfw:fchar-left-junction ?┣
            cfw:fchar-right-junction ?┫
            cfw:fchar-top-junction ?┯
            cfw:fchar-top-left-corner ?┏
            cfw:fchar-top-right-corner ?┓))
   #+end_src
** LaTeX
   Settings for exporting to LaTeX
   #+begin_src emacs-lisp :tangle yes
     (require 'ox-latex)
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     (setq org-latex-listings 'minted)

     (setq org-latex-pdf-process
           ;; Need 3 of the same string, oddly.
           (make-list 3 (concat
                         "pdflatex -shell-escape -interaction nonstopmode"
                         " -output-directory %o %f")))
   #+end_src
* Language Modes
** Markdown
   #+begin_src emacs-lisp :tangle yes
     (use-package markdown-mode
       :mode "\\.\\(m\\(ark\\)?down\\|md\\)$")
   #+end_src
** Prolog
   #+begin_src emacs-lisp :tangle yes
     (add-to-list 'auto-mode-alist '("\\.pro\\'" . prolog-mode))
     (add-hook 'prolog-mode-hook
               (lambda ()
                 (local-set-key (kbd "C-c C-c") 'prolog-compile-file)
                 (local-set-key (kbd "<backtab>") 'ediprolog-dwim)))
   #+end_src
** Matlab
   #+begin_src emacs-lisp :tangle yes
     (add-to-list 'custom-theme-load-path "~/.emacs.d/lisp/matlab-emacs")
     (load-library "matlab-load")
     (matlab-cedet-setup)
     (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
     (add-to-list
      'auto-mode-alist
      '("\\.m$" . matlab-mode))
     (setq matlab-indent-function t)
     (setq matlab-shell-command "matlab")
     ;; elisp setup for matlab-mode:
     (setq matlab-shell-command-switches (list "-nodesktop" "-nosplash"))
   #+end_src
** C/C++
   #+begin_src emacs-lisp :tangle yes
     (require 'cc-mode)

     (use-package helm-gtags)
     (use-package company-irony
       :config
       (add-hook 'irony-mode-hook
                 (lambda () (add-to-list 'company-backends 'company-irony))))
     (use-package flycheck-irony
       :config
       (add-hook 'irony-mode-hook 'flycheck-irony-setup))
     (use-package irony
       :config
       ;;(add-hook 'c++-mode-hook 'irony-mode)
       ;;(add-hook 'c-mode-hook 'irony-mode)
       (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
   #+end_src
** Blarb
   #+begin_src emacs-lisp :tangle yes
     (require 'blarb-mode)
   #+end_src
** CSV
   #+begin_src emacs-lisp :tangle yes
     (use-package csv-mode
       :mode "\\.csv$"
       :config
       (define-key csv-mode-map (kbd "C-c C-c")
         (lambda ()
           (interactive "P")
           (csv-align-fields nil (window-start) (window-end)))))
   #+end_src
   
** Python
   #+begin_src emacs-lisp :tangle yes
     (when (eq system-type 'darwin)
       (setq python-shell-interpreter "/usr/local/bin/python3"))
     (add-hook 'python-mode-hook
               (lambda ()
                 (add-to-list 'company-backends 'company-jedi)
                 (define-key
                   python-mode-map (kbd "C-c C-d") 'jedi:show-doc)))
   #+end_src
** Elisp
   #+begin_src emacs-lisp :tangle yes
     (with-eval-after-load 'flycheck
       (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

     (define-key emacs-lisp-mode-map (kbd "C-c C-c") 'eval-buffer)
     (define-key emacs-lisp-mode-map (kbd "C-c C-r") 'eval-region)

     (add-hook 'emacs-lisp-mode-hook (lambda () (electric-pair-mode t)))
   #+end_src
** Web
   #+begin_src emacs-lisp :tangle yes
     (use-package web-mode
       :mode "\\.\\(tsx\\|html\\.twig\\)$"
       :config
       (setq web-mode-enable-auto-closing t
             web-mode-enable-auto-indentation t))
   #+end_src
   
   Some functions for more easily narrowing script and style tags in web mode.
   
   #+begin_src emacs-lisp :tangle yes
     ;; Based on a gist by ceving:
     ;; https://gist.github.com/ceving/7ba174960b9dd3516fff

     (defun eli/narrow-to-html-style ()
       "Narrow a HTML buffer to the style part and switch to css-mode."
       (interactive)
       (widen)
       (goto-char (point-min))
       (re-search-forward "<style")
       (forward-line 1)
       (beginning-of-line)
       (let ((b (point)))
         (re-search-forward "</style>")
         (beginning-of-line)
         (let ((e (point)))
           (narrow-to-region b e)
           (css-mode))))

     (defun eli/narrow-to-html-script ()
       "Narrow a HTML buffer to the script part and switch to js-mode."
       (interactive)
       (widen)
       (goto-char (point-min))
       (re-search-forward "<script")
       (forward-line 1)
       (beginning-of-line)
       (let ((b (point)))
         (re-search-forward "</script>")
         (beginning-of-line)
         (let ((e (point)))
           (narrow-to-region b e)
           (js-mode))))

     (defun eli/widen-to-html ()
       "Widen a HTML buffer and reenable web-mode."
       (interactive)
       (widen)
       (web-mode))

     (defun eli/html-smart-narrow ()
       "Intelligently narrow or widen an HTML script or style tag."
       (interactive)

       (let ((lang (web-mode-language-at-pos (point))))
         (cond ((string= 'web-mode major-mode)
                (cond ((string= lang "javascript")
                       (eli/narrow-to-html-script))
                      ((string= lang "css")
                       (eli/narrow-to-html-style))))
               ((string= 'js-mode major-mode)
                (eli/widen-to-html))
               ((string= 'css-mode major-mode)
                (when (string= lang "css")
                  (eli/widen-to-html))))))

     (defun eli/bind-html-smart-narrow ()
       (local-set-key (kbd "C-x n SPC") 'eli/html-smart-narrow))

     (add-hook 'web-mode-hook 'eli/bind-html-smart-narrow)
     (add-hook 'js-mode-hook 'eli/bind-html-smart-narrow)
     (add-hook 'css-mode-hook 'eli/bind-html-smart-narrow)
   #+end_src
** PHP
   #+begin_src emacs-lisp :tangle yes
     (use-package php-mode
       :mode "\\.\\(php\\|inc\\)$")

     (use-package php-extras
       :config
       (add-hook 'php-mode-hook (lambda ()
                                  (php-extras-eldoc-documentation-function)
                                  (auto-complete-mode -1))))
   #+end_src
** JavaScript
   #+begin_src emacs-lisp :tangle yes
     (use-package lsp-javascript-typescript
       :config
       ;; Only load LSP mode if it's installed for JS
       (when (executable-find "javascript-typescript-stdio")
         (add-hook 'js-mode-hook #'lsp-javascript-typescript-enable)))
   #+end_src
** C#
   #+begin_src emacs-lisp :tangle yes
     (use-package csharp-mode)
     (use-package omnisharp
       :after company
       :config
       (setq omnisharp-server-executable-path
             "/usr/local/omnisharp/run.sh")
       (add-hook 'csharp-mode-hook 'omnisharp-mode)
       (add-to-list 'company-backends 'company-omnisharp)

       :bind
       (:map omnisharp-mode-map
             ("C-c C-c" . omnisharp-run-code-action-refactoring)))
   #+end_src

** YAML
   #+begin_src emacs-lisp :tangle yes
     (use-package yaml-mode)
   #+end_src
** Bison
   #+begin_src emacs-lisp :tangle yes
     (use-package bison-mode
       :mode "\\.y$")
   #+end_src
** Kotlin
   #+begin_src emacs-lisp :tangle yes
     (use-package kotlin-mode)
   #+end_src
   
   Nicer kotlin indentation
  
   #+begin_src emacs-lisp :tangle yes
     ;; Overrides the default kotlin indent function
     (defun kotlin-mode--indent-line ()
       "Indent current line as kotlin code"
       (interactive)
       (beginning-of-line)
       (if (bobp) ; 1.)
           (kotlin-mode--beginning-of-buffer-indent)
         (let ((not-indented t)
               (cur-indent 0))
           (cond ((looking-at "^[ \t]*\\.") ; line starts with .
                  (save-excursion
                    (kotlin-mode--prev-line)

                    (setq cur-indent
                          (if (looking-at "^[ \t]*\\.")
                              (current-indentation)
                            (+ (current-indentation) kotlin-tab-width)))

                    (when (< cur-indent 0)
                      (setq cur-indent 0))))

                 ((looking-at "^[ \t]*}") ; line starts with }
                  (save-excursion
                    (kotlin-mode--prev-line)
                    (while (and
                            (or (looking-at "^[ \t]*$") (looking-at "^[ \t]*\\."))
                            (not (bobp)))
                      (kotlin-mode--prev-line))
                    (setq cur-indent
                          (if (or
                               (looking-at ".*{[ \t]*$")
                               (looking-at ".*{.*->[ \t]*$"))
                              (current-indentation)
                            (- (current-indentation) kotlin-tab-width))))

                  (when (< cur-indent 0)
                    (setq cur-indent 0)))

                 ((looking-at "^[ \t]*)") ; line starts with )
                  (save-excursion
                    (kotlin-mode--prev-line)
                    (setq cur-indent (- (current-indentation) kotlin-tab-width)))
                  (when (< cur-indent 0)
                    (setq cur-indent 0)))

                 ((looking-at ".*[gs]et\(.*") ; line is a getter or setter
                  (save-excursion
                    (kotlin-mode--prev-line)
                    (setq cur-indent (+ (current-indentation) kotlin-tab-width))))

                 (t
                  (save-excursion
                    (while not-indented
                      (kotlin-mode--prev-line)
                      (cond ((looking-at ".*{[ \t]*$") ; line ends with {
                             (setq cur-indent
                                   (+ (current-indentation) kotlin-tab-width))
                             (setq not-indented nil))

                            ((looking-at "^[ \t]*}") ; line starts with }
                             (setq cur-indent (current-indentation))
                             (setq not-indented nil))

                            ((looking-at ".*{.*->[ \t]*$") ; line ends with ->
                             (setq cur-indent
                                   (+ (current-indentation) kotlin-tab-width))
                             (setq not-indented nil))

                            ((looking-at ".*([ \t]*$") ; line ends with (
                             (setq cur-indent
                                   (+ (current-indentation) kotlin-tab-width))
                             (setq not-indented nil))

                            ((looking-at "^[ \t]*).*$") ; line starts with )
                             (setq cur-indent (current-indentation))
                             (setq not-indented nil))

                            ((bobp) ; 5.)
                             (setq not-indented nil)))))))
           (indent-line-to cur-indent))))
   #+end_src
** Java
   #+begin_src emacs-lisp :tangle yes
     (add-to-list 'auto-mode-alist '("\\.gradle$" . java-mode))
   #+end_src
** Groovy
   #+begin_src emacs-lisp :tangle yes
     (use-package groovy-mode
       :mode ("\\.gradle$" . groovy-mode))
   #+end_src
** Objective-C
   #+begin_src emacs-lisp :tangle yes
     (add-to-list 'auto-mode-alist '("\\.m\\'" . objc-mode))
     (add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode))

     (use-package objc-font-lock
       :config
       (objc-font-lock-global-mode 1))
   #+end_src
** Eshell
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'eshell-mode-hook
               '(lambda () (company-mode -1)))
   #+end_src
* Apps
** Gnus
   #+begin_src emacs-lisp :tangle yes
     (use-package gnus
       :config
       (setq user-mail-address "elimirks@gmail.com"
             user-full-name "Elijah Mirecki")

       (setq gnus-select-method
             '(nnimap "gmail"
                      (nnimap-address "imap.gmail.com")
                      (nnimap-server-port "imaps")
                      (nnimap-stream ssl)))

       (setq gnus-posting-styles
             `((".*"
                (address "elimirks@gmail.com")
                (name "Elijah Mirecki")
                ("X-Message-SMTP-Method" "smtp smtp.gmail.com 587"))
               ;; Carpages.ca (work) email
               ("^nnimap[+]rackspace*"
                (address "elijah@carpages.ca")
                (name "Elijah Mirecki")
                ("X-Message-SMTP-Method" "smtp smtp.emailsrvr.com 25"))))

       (add-to-list 'gnus-secondary-select-methods
                    '(nnimap "rackspace"
                             (nnimap-address "secure.emailsrvr.com")
                             (nnimap-server-port 993)
                             (nnimap-stream ssl)
                             (nnir-search-engine imap)
                             (nnmail-expiry-wait 90)))

       (setq gnus-permanently-visible-groups ".*INBOX.*")

       ;; Display attachment images inline
       (add-to-list 'mm-attachment-override-types "image/.*"))

     ;; "Big Brother DataBase", for address book
     (use-package bbdb
       :config
       (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
       ;; Disable helm for creating BBDB entries
       ;; (It caused annoying completion issues)
       (add-to-list 'helm-completing-read-handlers-alist
                    '(bbdb-create . nil))
       (bbdb-insinuate-message)
       (setq
        bbdb-file "~/Dropbox/Notes/bbdb"
        bbdb-always-add-address t
        bbdb/mail-auto-create-p 'bbdb-ignore-some-messages-hook)
       (setq
        bbdb-ignore-some-messages-alist
        '(( "From" .
            "no.?reply\\|DAEMON\\|daemon\\|facebookmail\\|twitter"))))
   #+end_src
** DocViewMode
   This mode is for document viewing, such as PDFs.

   #+begin_src emacs-lisp :tangle yes
     ;; Evil mode caused the document to blink - this fixes it
     (evil-set-initial-state 'doc-view-mode 'emacs)
     (add-hook 'doc-view-mode-hook
               (lambda ()
                 (set
                  (make-local-variable 'evil-emacs-state-cursor)
                  (list nil))))
   #+end_src
** ERC
   #+begin_src emacs-lisp :tangle yes
     (use-package erc
       :config
       (setq erc-hide-list '("JOIN" "PART" "QUIT")))
   #+end_src
** Slack
   #+begin_src emacs-lisp :tangle yes
     (use-package slack
       :commands (slack-start)
       :init
       (setq slack-buffer-emojify t)
       (setq slack-prefer-current-team t)
       :config

       ;; Only use Slack company completion
       (make-local-variable 'company-backends)
       (setq company-backends '((company-slack-backend)))

       (add-hook 'slack-mode-hook
                 '(lambda ()
                    (flycheck-mode -1)
                    (company-mode -1)))

       ;; Disable helm for file uploads - it gets stuck in a loop :/
       (add-to-list 'helm-completing-read-handlers-alist
                    '(slack-file-upload . nil))

       (evil-define-key 'normal slack-mode-map
         ",ra" 'slack-message-add-reaction
         ",rr" 'slack-message-remove-reaction
         ",rs" 'slack-message-show-reaction-users
         ",pl" 'slack-room-pins-list
         ",pa" 'slack-message-pins-add
         ",pr" 'slack-message-pins-remove
         ",mm" 'slack-message-write-another-buffer
         ",me" 'slack-message-edit
         ",md" 'slack-message-delete
         ",2" 'slack-message-embed-mention
         ",3" 'slack-message-embed-channel
         "\C-n" 'slack-buffer-goto-next-message
         "\C-p" 'slack-buffer-goto-prev-message)
       (evil-define-key 'normal slack-edit-message-mode-map
         ",k" 'slack-message-cancel-edit
         ",s" 'slack-message-send-from-buffer
         ",2" 'slack-message-embed-mention
         ",3" 'slack-message-embed-channel))
   #+end_src
   
   Function to select a new team programatically

   #+begin_src emacs-lisp :tangle yes
     (defun eli/slack-change-to-team (team-name)
       "Changes the current Slack team - to set a default team in config"
       (interactive)
       (let ((team (slack-team-find-by-name team-name)))
         (when team
           (progn
             (setq slack-current-team team)
             (slack-team-connect team))
           (message (concat "No such Slack team: " team-name)))))

     (defun eli/slack-request-emoji ()
       "Pull emojis for the current team."
       (interactive)
       (if slack-current-team
           (slack-request-emoji slack-current-team)
         (message "Not connected to any team!")))
   #+end_src
** MultiTerm
   #+begin_src emacs-lisp :tangle yes
     (use-package multi-term
       :config
       (evil-define-key 'normal term-mode-map
         (kbd "RET") 'term-send-return)

       (setq multi-term-program "/bin/zsh"))
   #+end_src
** REST Client

   [[https://github.com/pashky/restclient.el][REST Client]]. A handy client for testing REST APIs

   #+begin_src emacs-lisp :tangle yes
     (use-package restclient
       :bind (:map restclient-mode-map ("C-c C-e" . eli/url-hexify-region))
       :mode ("\\.http$" . restclient-mode)
       :config
       (defconst restclient-method-url-regexp
         (concat
          "^\\("
          "GET\\|POST\\|DELETE\\|PUT\\|HEAD"
          "\\|OPTIONS\\|PATCH\\|LINK\\|UNLINK"
          "\\) \\(.*\\)$")))
     (use-package restclient-helm)
     (use-package company-restclient
       :config
       (add-hook 'restclient-mode-hook
                 (lambda ()
                   (set
                    (make-local-variable 'company-backends)
                    (list 'company-restclient)))))
   #+end_src
** xkcd
   #+begin_src emacs-lisp :tangle yes
     (use-package xkcd
       :if window-system
       :bind (:map xkcd-mode-map
                   ("C-c C-n" . xkcd-next)
                   ("C-c C-p" . xkcd-prev)
                   ("C-c C-r" . xkcd-rand)
                   ("C-c C-a" . xkcd-alt-text)))
   #+end_src
